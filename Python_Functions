{"cells":[{"cell_type":"code","source":["# Question1: Write a Python function that takes a list of numbers as input and returns the sum of all even numbers in the list.\n","\n","def sum_of_even_numbers(numbers):\n","    return sum(num for num in numbers if num % 2 == 0)\n","\n","numbers = [47, 11, 42, 13, 8, 26]\n","result = sum_of_even_numbers(numbers)\n","print(\"Sum of even numbers:\", result)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"w94rxc3RPvom","executionInfo":{"status":"ok","timestamp":1735205118200,"user_tz":-330,"elapsed":434,"user":{"displayName":"","userId":""}},"outputId":"a8d3674b-5e2d-4089-f43d-280c47f98328"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Sum of even numbers: 76\n"]}]},{"cell_type":"code","source":["# Question2: Create a Python function that accepts a string and returns the reverse of that string.\n","\n","def reverse_string(s):\n","     return s[::-1]\n","\n","input_string = \"Hello, World!\"\n","reversed_string = reverse_string(input_string)\n","print(\"Reversed string:\", reversed_string)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HXdJpXEHSTJY","executionInfo":{"status":"ok","timestamp":1735205233673,"user_tz":-330,"elapsed":1717,"user":{"displayName":"","userId":""}},"outputId":"79bf90ff-2d4e-4dfe-c48c-7b78046ddfba"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Reversed string: !dlroW ,olleH\n"]}]},{"cell_type":"code","source":["# Question3: Implement a Python function that takes a list of integers and returns a new list containing the squares of each number.\n","\n","def square_numbers(numbers):\n","    return [num ** 2 for num in numbers]\n","\n","input_list = [1, 2, 3, 4, 5]\n","squared_list = square_numbers(input_list)\n","print(\"Squared numbers:\", squared_list)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OoNzXjfwSr2H","executionInfo":{"status":"ok","timestamp":1735205414506,"user_tz":-330,"elapsed":4,"user":{"displayName":"","userId":""}},"outputId":"362bf8a5-bf0d-4293-ae45-94dd8f8f0e61"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Squared numbers: [1, 4, 9, 16, 25]\n"]}]},{"cell_type":"code","source":["# Question4: Write a Python function that checks if a given number is prime or not from 1 to 200.\n","\n","def is_prime(n):\n","    if n < 2:\n","        return False\n","    for i in range(2, int(n ** 0.5) + 1):\n","        if n % i == 0:\n","            return False\n","    return True\n","\n","for num in range(1, 201):\n","    if is_prime(num):\n","        print(num, \"is prime\")\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EP5JFhSoTYbr","executionInfo":{"status":"ok","timestamp":1735206417656,"user_tz":-330,"elapsed":420,"user":{"displayName":"","userId":""}},"outputId":"e355e8bf-2027-43b6-c218-7a3a4fd68858"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["2 is prime\n","3 is prime\n","5 is prime\n","7 is prime\n","11 is prime\n","13 is prime\n","17 is prime\n","19 is prime\n","23 is prime\n","29 is prime\n","31 is prime\n","37 is prime\n","41 is prime\n","43 is prime\n","47 is prime\n","53 is prime\n","59 is prime\n","61 is prime\n","67 is prime\n","71 is prime\n","73 is prime\n","79 is prime\n","83 is prime\n","89 is prime\n","97 is prime\n","101 is prime\n","103 is prime\n","107 is prime\n","109 is prime\n","113 is prime\n","127 is prime\n","131 is prime\n","137 is prime\n","139 is prime\n","149 is prime\n","151 is prime\n","157 is prime\n","163 is prime\n","167 is prime\n","173 is prime\n","179 is prime\n","181 is prime\n","191 is prime\n","193 is prime\n","197 is prime\n","199 is prime\n"]}]},{"cell_type":"code","source":["# Question5: Create an iterator class in Python that generates the Fibonacci sequence up to a specified number of terms.\n","\n","class FibonacciIterator:\n","    def __init__(num):\n","        \"\"\"Initialize the Fibonacci sequence generator.\"\"\"\n","        num.a, num.b = 0, 1  # The first two Fibonacci numbers\n","\n","    def __iter__(self):\n","        \"\"\"The __iter__ method makes this class an iterator.\"\"\"\n","        return num\n","\n","    def __next__(num):\n","        \"\"\"The __next__ method generates the next Fibonacci number in the sequence.\"\"\"\n","        fib_number = num.a\n","        num.a, num.b = num.b, num.a + num.b\n","        return fib_number\n","\n","fibonacci_sequence = FibonacciIterator()\n","for _ in range(10):\n","    print(next(fibonacci_sequence))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"v1J1KPpuXM9B","executionInfo":{"status":"ok","timestamp":1735212187668,"user_tz":-330,"elapsed":449,"user":{"displayName":"","userId":""}},"outputId":"ceecd366-b0d9-4e27-d0ef-ddabc9a71fce"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["0\n","1\n","1\n","2\n","3\n","5\n","8\n","13\n","21\n","34\n"]}]},{"cell_type":"code","source":["# Question6:  Write a generator function in Python that yields the powers of 2 up to a given exponent.\n","\n","def powers_of_2(exponent):\n","    for i in range(exponent + 1):\n","        yield 2 ** i\n","\n","for power in powers_of_2(5):\n","    print(power)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OLFqHN-mtOYZ","executionInfo":{"status":"ok","timestamp":1735212391876,"user_tz":-330,"elapsed":413,"user":{"displayName":"","userId":""}},"outputId":"78439a8a-3be2-4949-d8a7-7d406add57ab"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["1\n","2\n","4\n","8\n","16\n","32\n"]}]},{"cell_type":"code","source":["# Question7: Implement a generator function that reads a file line by line and yields each line as a string.\n","\n","def read_file_lines(file_path):\n","    with open(file_path, 'r') as file:\n","        for line in file:\n","            yield line.strip()\n","\n","file_path = 'example.txt'\n","for line in read_file_lines(\"/content/sample_data/anscombe.json\"):\n","    print(line)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7T0bZn2luABY","executionInfo":{"status":"ok","timestamp":1735212932437,"user_tz":-330,"elapsed":398,"user":{"displayName":"","userId":""}},"outputId":"25da611d-4dcd-46a9-90fd-0572a7484ea0"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["[\n","{\"Series\":\"I\", \"X\":10.0, \"Y\":8.04},\n","{\"Series\":\"I\", \"X\":8.0, \"Y\":6.95},\n","{\"Series\":\"I\", \"X\":13.0, \"Y\":7.58},\n","{\"Series\":\"I\", \"X\":9.0, \"Y\":8.81},\n","{\"Series\":\"I\", \"X\":11.0, \"Y\":8.33},\n","{\"Series\":\"I\", \"X\":14.0, \"Y\":9.96},\n","{\"Series\":\"I\", \"X\":6.0, \"Y\":7.24},\n","{\"Series\":\"I\", \"X\":4.0, \"Y\":4.26},\n","{\"Series\":\"I\", \"X\":12.0, \"Y\":10.84},\n","{\"Series\":\"I\", \"X\":7.0, \"Y\":4.81},\n","{\"Series\":\"I\", \"X\":5.0, \"Y\":5.68},\n","\n","{\"Series\":\"II\", \"X\":10.0, \"Y\":9.14},\n","{\"Series\":\"II\", \"X\":8.0, \"Y\":8.14},\n","{\"Series\":\"II\", \"X\":13.0, \"Y\":8.74},\n","{\"Series\":\"II\", \"X\":9.0, \"Y\":8.77},\n","{\"Series\":\"II\", \"X\":11.0, \"Y\":9.26},\n","{\"Series\":\"II\", \"X\":14.0, \"Y\":8.10},\n","{\"Series\":\"II\", \"X\":6.0, \"Y\":6.13},\n","{\"Series\":\"II\", \"X\":4.0, \"Y\":3.10},\n","{\"Series\":\"II\", \"X\":12.0, \"Y\":9.13},\n","{\"Series\":\"II\", \"X\":7.0, \"Y\":7.26},\n","{\"Series\":\"II\", \"X\":5.0, \"Y\":4.74},\n","\n","{\"Series\":\"III\", \"X\":10.0, \"Y\":7.46},\n","{\"Series\":\"III\", \"X\":8.0, \"Y\":6.77},\n","{\"Series\":\"III\", \"X\":13.0, \"Y\":12.74},\n","{\"Series\":\"III\", \"X\":9.0, \"Y\":7.11},\n","{\"Series\":\"III\", \"X\":11.0, \"Y\":7.81},\n","{\"Series\":\"III\", \"X\":14.0, \"Y\":8.84},\n","{\"Series\":\"III\", \"X\":6.0, \"Y\":6.08},\n","{\"Series\":\"III\", \"X\":4.0, \"Y\":5.39},\n","{\"Series\":\"III\", \"X\":12.0, \"Y\":8.15},\n","{\"Series\":\"III\", \"X\":7.0, \"Y\":6.42},\n","{\"Series\":\"III\", \"X\":5.0, \"Y\":5.73},\n","\n","{\"Series\":\"IV\", \"X\":8.0, \"Y\":6.58},\n","{\"Series\":\"IV\", \"X\":8.0, \"Y\":5.76},\n","{\"Series\":\"IV\", \"X\":8.0, \"Y\":7.71},\n","{\"Series\":\"IV\", \"X\":8.0, \"Y\":8.84},\n","{\"Series\":\"IV\", \"X\":8.0, \"Y\":8.47},\n","{\"Series\":\"IV\", \"X\":8.0, \"Y\":7.04},\n","{\"Series\":\"IV\", \"X\":8.0, \"Y\":5.25},\n","{\"Series\":\"IV\", \"X\":19.0, \"Y\":12.50},\n","{\"Series\":\"IV\", \"X\":8.0, \"Y\":5.56},\n","{\"Series\":\"IV\", \"X\":8.0, \"Y\":7.91},\n","{\"Series\":\"IV\", \"X\":8.0, \"Y\":6.89}\n","]\n"]}]},{"cell_type":"code","source":["# Question8: Use a lambda function in Python to sort a list of tuples based on the second element of each tuple.\n","\n","tuples_list = [(1, 4), (3, 1), (2, 6), (4, 2)]\n","sorted_list = sorted(tuples_list, key=lambda x: x[1])\n","print(sorted_list)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CjMaoWsywELP","executionInfo":{"status":"ok","timestamp":1735213043893,"user_tz":-330,"elapsed":483,"user":{"displayName":"","userId":""}},"outputId":"58ab7c2d-6543-40be-d536-de28cceea437"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["[(3, 1), (4, 2), (1, 4), (2, 6)]\n"]}]},{"cell_type":"code","source":["# Question9: Write a Python program that uses `map()` to convert a list of temperatures from Celsius to Fahrenheit.\n","\n","celsius_temperatures = [0, 20, 25, 30, 35, 40]\n","\n","def celsius_to_fahrenheit(celsius):\n","    return (celsius * 9/5) + 32\n","\n","fahrenheit_temperatures = list(map(celsius_to_fahrenheit, celsius_temperatures))\n","print(fahrenheit_temperatures)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bBSfbkxnwwmA","executionInfo":{"status":"ok","timestamp":1735213790735,"user_tz":-330,"elapsed":383,"user":{"displayName":"","userId":""}},"outputId":"1ce0c92c-411e-45f9-f5d8-8c07bf5efa22"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["[32.0, 68.0, 77.0, 86.0, 95.0, 104.0]\n"]}]},{"cell_type":"code","source":["# Question10: Create a Python program that uses `filter()` to remove all the vowels from a given string.\n","\n","def is_not_vowel(char):\n","    return char.lower() not in 'aeiou'\n","\n","input_string = \"Hello, World!\"\n","filtered_string = ''.join(filter(is_not_vowel, input_string))\n","print(filtered_string)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"D5a1LNOEzVQw","executionInfo":{"status":"ok","timestamp":1735213908564,"user_tz":-330,"elapsed":413,"user":{"displayName":"","userId":""}},"outputId":"71f7e1f2-b6d5-4f67-b6b6-ed96afd5d376"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Hll, Wrld!\n"]}]},{"cell_type":"code","source":["# Question11: Imagine an accounting routine used in a book shop. It works on a list with sublists, which look like this:\n","\"\"\"Write a Python program, which returns a list with 2-tuples. Each tuple consists of the order number and the\n","product of the price per item and the quantity. The product should be increased by 10,- € if the value of the\n","order is smaller than 100,00 €.Write a Python program using lambda and map.\"\"\"\n","\n","orders = [\n","    [34587, \"Learning Python, Mark Lutz\", 4, 40.95],\n","    [98762, \"Programming Python, Mark Lutz\", 5, 56.80],\n","    [77226, \"Head First Python, Paul Barry\", 3, 32.95],\n","    [88112, \"Einfuhrung in Python3, Bernd Klein\", 3, 24.99],\n","]\n","\n","result = list(map(lambda x: (x[0], (x[2] * x[3]) + 10 if x[2] * x[3] < 100 else x[2] * x[3]), orders))\n","\n","print(result)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DBsC3Xgcz2-n","executionInfo":{"status":"ok","timestamp":1735215465323,"user_tz":-330,"elapsed":9,"user":{"displayName":"","userId":""}},"outputId":"025f0d29-4273-4e37-fe71-6006800db2b4"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["[(34587, 163.8), (98762, 284.0), (77226, 108.85000000000001), (88112, 84.97)]\n"]}]}],"metadata":{"colab":{"name":"Welcome to Colaboratory","provenance":[{"file_id":"/v2/external/notebooks/intro.ipynb","timestamp":1735220997084}]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}